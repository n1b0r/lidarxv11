


# Maximals measured by sparkfun
MAX_DIST = 6.0
MIN_DIST = 0.15
# dist is 14bit encoded
MAX_DIST_VALUE = 0xFF >> 2
# convert to int array

class LidarMeasure:
    def __init__(self, data, index):
        self.index = index
        self.distance = self.parseDist(data)
        self.warningFlag = self.parseWarningFlag(data)
        self.invalidFlag = self.parseInvalidFlag(data)
        self.signalStrength = self.parseSignalStrength(data)

        self.errorCode = None
        if self.invalidFlag:
            self.errorCode = hex(data[0])

    def __str__(self):
        return ''.join(['\nLidarMeasure[\n',
            '\tindex: ', str(self.index), ', \n',
            '\tdistance: ', str(self.distance), ',\n ',
            '\twarningFlag: ', str(self.warningFlag), ', \n',
            '\tinvalidFlag: ', str(self.invalidFlag), ', \n',
            '\tsignalStrength: ', str(self.signalStrength), ', \n',
            '\terrorCode: ', str(self.errorCode), ', \n',
        ']'])

    def __repr__(self):
        return self.__str__()

    def parseInvalidFlag(self, value):
        """
            First bit of data is the flag that say if calculation failed
            shift on right by 7
            if 1: it failed
        """
        return value[1] >> 7 == 1

    def parseWarningFlag(self, value):
        """
            Warning flag: bit 6 of byte 1
        """
        # apply mask and shif
        return ((value[1] & 0x40) >> 6) == 1

    def parseDist(self, value):
        """
            Byte 0: distance 7:0
            Byte 1: <invalid flag> <warning flag> distance 13:8

            Distance is 14 bit encoded
        """

        # remove flags (mask 0011 1111)
        dist = value[1] & 0x3F
        # shift to left for 8
        dist = dist << 8
        # add the second part
        dist += value[0]

        # to metter
        dist = ((MAX_DIST - MIN_DIST) / MAX_DIST_VALUE) * dist + MIN_DIST

        return dist

    def parseSignalStrength(self, value):
        """
            Signal strength is the last two bytes
            byte 2: signal 7:0
            byte 3: signal 15:8
        """
        # shift byte 3 for 8 and add 2
        return (value[3] << 8) + value[2]



class LidarPacket:

    def __init__(self, bytes):
        self.index = 0
        self.speed = []
        self.data = []
        self.bytes = []
        self.bytes = bytes
        packet = [x for x in bytes]
        if packet[0] != 0xFA:
            raise Exception('packet dont start by fanion (0xFA)')

        if len(packet) != 22:
            raise Exception('Expecting a 22 bytes length packet')

        self.index = packet[1] - 0xA0

        for i in range(4):
            ind = self.index * 4 + i
            data = packet[ 4 + i * 4: 8 + i * 4]
            self.data.append(LidarMeasure(data, ind))


    def __str__(self):
        return ''.join([
        'LidarPacket['
        'index: ',  str(self.index),  ', ',
        'speed: ',  str(self.speed), ',',
        'data: ',  str(self.data), ',',
        ']'])

############### data

data = "53:70:69:6e:2e:2e:2e:33:20:45:53:43:73:20:6f:72:20:42:52:45:41:4b:20:74:6f:20:61:62:6f:72:74:2e:2e:2e:00:00:fa:af:7f:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:77:39:fa:dc:07:0f:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:98:73:fa:df:38:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:91:45:fa:b0:30:18:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:66:5f:fa:f9:1e:1a:52:80:04:00:02:39:fa:f4:1e:1a:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:b1:33:fa:df:bb:14:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:1b:6b:fa:b4:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:7c:77:fa:b5:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:80:77:fa:b6:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:84:77:fa:b7:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:88:77:fa:b8:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8c:77:fa:dc:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:1c:78:fa:b0:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:6c:77:fa:dd:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:20:78:fa:b0:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:6c:77:fa:dd:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:20:78:fa:b1:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:70:77:fa:de:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:24:78:fa:b1:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:70:77:fa:de:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:24:78:fa:b2:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:74:77:fa:df:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:28:78:fa:b2:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:74:77:fa:df:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:28:78:fa:b2:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:74:77:fa:e0:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:2c:78:fa:b3:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:78:77:fa:e0:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:2c:78:fa:b3:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:78:77:fa:e1:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:30:78:fa:b4:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:7c:77:fa:e1:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:30:78:fa:b4:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:7c:77:fa:e2:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:34:78:fa:b5:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:80:77:fa:e2:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:34:78:fa:b5:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:80:77:fa:e3:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:38:78:fa:b6:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:84:77:fa:e3:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:38:78:fa:b6:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:70:77:fa:e3:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:24:78:fa:b7:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:74:77:fa:e4:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:28:78:fa:b7:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:74:77:fa:e4:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:28:78:fa:b7:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:74:77:fa:e4:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:28:78:fa:b7:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:74:77:fa:e4:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:28:78:fa:b8:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:78:77:fa:e5:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:2c:78:fa:b8:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:78:77:fa:e5:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:2c:78:fa:b8:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:78:77:fa:e5:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:2c:78:fa:b8:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:78:77:fa:e6:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:30:78:fa:b9:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:7c:77:fa:e6:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:30:78:fa:b9:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:7c:77:fa:e6:48:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:30:78:fa:b9:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:89:6e:fa:e6:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:3d:6f:fa:b9:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:89:6e:fa:e6:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:3d:6f:fa:b9:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:89:6e:fa:e6:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:3d:6f:fa:ba:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8d:6e:fa:e7:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:41:6f:fa:ba:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8d:6e:fa:e7:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:41:6f:fa:ba:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8d:6e:fa:e7:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:41:6f:fa:ba:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8d:6e:fa:e7:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:41:6f:fa:ba:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8d:6e:fa:e7:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:41:6f:fa:ba:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8d:6e:fa:e7:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:41:6f:fa:ba:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8d:6e:fa:e7:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:41:6f:fa:ba:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8d:6e:fa:e7:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:41:6f:fa:ba:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8d:6e:fa:e7:bf:17:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:41:6f:fa:ba:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8a:40:fa:e7:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:3e:41:fa:ba:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8a:40:fa:e7:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:3e:41:fa:ba:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8a:40:fa:e7:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:3e:41:fa:ba:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8a:40:fa:e7:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:3e:41:fa:ba:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:8a:40:fa:e7:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:3e:41:fa:ba:16:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00"
rows = [''.join(['fa:', x]) for x in data.split(':fa:')]
# remove uncomplete rows
rows = rows[1: len(rows) -2]

############### MAIN

s = "fa:b5:48:1b:52:80:04:00:52:80:04:00:52:80:04:00:52:80:04:00:80:77"

# Convert it back to byte for simulate real input
bytesRows = [bytearray([ int(x, 16) for x in s.split(':')]) for s in rows]

# print(LidarPacket(bytesRows[7]))
# print(LidarPacket(bytesRows[8]))
# print(LidarPacket(bytesRows[9]))
# print(LidarPacket(bytesRows[10]))
# #
# # exit(0)
# for row in bytesRows:
#     try:
#         m = LidarPacket(row)
#         print ('\n\n' + str(m))
#     except Exception:
#         print('fail')
